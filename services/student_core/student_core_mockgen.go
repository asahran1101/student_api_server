// Code generated by MockGen. DO NOT EDIT.
// Source: student_core/student_core_api.go

// Package student_core is a generated GoMock package.
package student_core

import (
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
)

// MockStudentCoreInterface is a mock of StudentCoreInterface interface.
type MockStudentCoreInterface struct {
	ctrl     *gomock.Controller
	recorder *MockStudentCoreInterfaceMockRecorder
}

// MockStudentCoreInterfaceMockRecorder is the mock recorder for MockStudentCoreInterface.
type MockStudentCoreInterfaceMockRecorder struct {
	mock *MockStudentCoreInterface
}

// NewMockStudentCoreInterface creates a new mock instance.
func NewMockStudentCoreInterface(ctrl *gomock.Controller) *MockStudentCoreInterface {
	mock := &MockStudentCoreInterface{ctrl: ctrl}
	mock.recorder = &MockStudentCoreInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStudentCoreInterface) EXPECT() *MockStudentCoreInterfaceMockRecorder {
	return m.recorder
}

// CreateStudent mocks base method.
func (m *MockStudentCoreInterface) CreateStudent(context *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CreateStudent", context)
}

// CreateStudent indicates an expected call of CreateStudent.
func (mr *MockStudentCoreInterfaceMockRecorder) CreateStudent(context interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStudent", reflect.TypeOf((*MockStudentCoreInterface)(nil).CreateStudent), context)
}

// DeleteStudent mocks base method.
func (m *MockStudentCoreInterface) DeleteStudent(context *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteStudent", context)
}

// DeleteStudent indicates an expected call of DeleteStudent.
func (mr *MockStudentCoreInterfaceMockRecorder) DeleteStudent(context interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStudent", reflect.TypeOf((*MockStudentCoreInterface)(nil).DeleteStudent), context)
}

// GetAllStudents mocks base method.
func (m *MockStudentCoreInterface) GetAllStudents(context *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetAllStudents", context)
}

// GetAllStudents indicates an expected call of GetAllStudents.
func (mr *MockStudentCoreInterfaceMockRecorder) GetAllStudents(context interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllStudents", reflect.TypeOf((*MockStudentCoreInterface)(nil).GetAllStudents), context)
}

// GetStudentByRollNo mocks base method.
func (m *MockStudentCoreInterface) GetStudentByRollNo(context *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetStudentByRollNo", context)
}

// GetStudentByRollNo indicates an expected call of GetStudentByRollNo.
func (mr *MockStudentCoreInterfaceMockRecorder) GetStudentByRollNo(context interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStudentByRollNo", reflect.TypeOf((*MockStudentCoreInterface)(nil).GetStudentByRollNo), context)
}

// UpdateStudent mocks base method.
func (m *MockStudentCoreInterface) UpdateStudent(context *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateStudent", context)
}

// UpdateStudent indicates an expected call of UpdateStudent.
func (mr *MockStudentCoreInterfaceMockRecorder) UpdateStudent(context interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStudent", reflect.TypeOf((*MockStudentCoreInterface)(nil).UpdateStudent), context)
}
