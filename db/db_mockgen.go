// Code generated by MockGen. DO NOT EDIT.
// Source: db/db.go

// Package db is a generated GoMock package.
package db

import (
	reflect "reflect"

	models "example.com/api/models"
	gomock "github.com/golang/mock/gomock"
)

// MockDatabaseInterface is a mock of DatabaseInterface interface.
type MockDatabaseInterface struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseInterfaceMockRecorder
}

// MockDatabaseInterfaceMockRecorder is the mock recorder for MockDatabaseInterface.
type MockDatabaseInterfaceMockRecorder struct {
	mock *MockDatabaseInterface
}

// NewMockDatabaseInterface creates a new mock instance.
func NewMockDatabaseInterface(ctrl *gomock.Controller) *MockDatabaseInterface {
	mock := &MockDatabaseInterface{ctrl: ctrl}
	mock.recorder = &MockDatabaseInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabaseInterface) EXPECT() *MockDatabaseInterfaceMockRecorder {
	return m.recorder
}

// DeleteStudentByRollNo mocks base method.
func (m *MockDatabaseInterface) DeleteStudentByRollNo(rollNo int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStudentByRollNo", rollNo)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteStudentByRollNo indicates an expected call of DeleteStudentByRollNo.
func (mr *MockDatabaseInterfaceMockRecorder) DeleteStudentByRollNo(rollNo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStudentByRollNo", reflect.TypeOf((*MockDatabaseInterface)(nil).DeleteStudentByRollNo), rollNo)
}

// Insert mocks base method.
func (m *MockDatabaseInterface) Insert(s *models.Student) (*models.Student, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", s)
	ret0, _ := ret[0].(*models.Student)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockDatabaseInterfaceMockRecorder) Insert(s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockDatabaseInterface)(nil).Insert), s)
}

// SelectAllStudents mocks base method.
func (m *MockDatabaseInterface) SelectAllStudents() ([]models.Student, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectAllStudents")
	ret0, _ := ret[0].([]models.Student)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectAllStudents indicates an expected call of SelectAllStudents.
func (mr *MockDatabaseInterfaceMockRecorder) SelectAllStudents() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectAllStudents", reflect.TypeOf((*MockDatabaseInterface)(nil).SelectAllStudents))
}

// SelectStudentByRollNo mocks base method.
func (m *MockDatabaseInterface) SelectStudentByRollNo(rollNo int) (*models.Student, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectStudentByRollNo", rollNo)
	ret0, _ := ret[0].(*models.Student)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectStudentByRollNo indicates an expected call of SelectStudentByRollNo.
func (mr *MockDatabaseInterfaceMockRecorder) SelectStudentByRollNo(rollNo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectStudentByRollNo", reflect.TypeOf((*MockDatabaseInterface)(nil).SelectStudentByRollNo), rollNo)
}

// UpdateStudentByRollNo mocks base method.
func (m *MockDatabaseInterface) UpdateStudentByRollNo(s *models.Student) (*models.Student, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStudentByRollNo", s)
	ret0, _ := ret[0].(*models.Student)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStudentByRollNo indicates an expected call of UpdateStudentByRollNo.
func (mr *MockDatabaseInterfaceMockRecorder) UpdateStudentByRollNo(s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStudentByRollNo", reflect.TypeOf((*MockDatabaseInterface)(nil).UpdateStudentByRollNo), s)
}
